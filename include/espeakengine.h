#ifndef ESPEAKENGINE_H
#define ESPEAKENGINE_H

#include <wx/wx.h>
#include <wx/thread.h>
#include <vector>
#include <mutex>

/**
 * @brief Text-to-speech engine using espeak-ng
 *
 * Provides French language speech synthesis for typed text.
 * Audio is generated by espeak-ng and played back through wxWidgets audio system.
 */
class ESpeakEngine
{
public:
    ESpeakEngine();
    ~ESpeakEngine();

    // Initialize espeak with French voice
    bool Initialize(const wxString& espeakDataPath);

    // Cleanup
    void Shutdown();

    // Check if initialized
    bool IsInitialized() const { return m_initialized; }

    // Speak text (non-blocking)
    void Speak(const wxString& text);

    // Stop current speech
    void Stop();

    // Settings
    void SetVoice(const wxString& voiceName);
    void SetRate(int rate);  // 80-450 (default 175)
    void SetPitch(int pitch); // 0-99 (default 50)
    void SetVolume(int volume); // 0-200 (default 100)

private:
    // Callback from espeak (static trampoline)
    // Note: espeak callback signature is: int callback(short *wav, int numsamples, espeak_EVENT *events)
    static int SynthCallback(short *wav, int numsamples, void* events);

    // Instance callback handler
    void HandleSynthCallback(short *wav, int numsamples);

    // Audio playback
    void PlayAudio();

    bool m_initialized;

    // Audio buffer (PCM data from espeak)
    std::vector<char> m_audioData;
    std::mutex m_audioLock;

    // Complete WAV file data (header + PCM data) - must persist during playback
    std::vector<char> m_wavData;

    // Audio format parameters
    int m_sampleRate;

    // Thread safety for espeak calls
    std::mutex m_espeakLock;
};

#endif // ESPEAKENGINE_H
